name: "Merged to master: build all and deploy all tests"

on:
  push:
    branches:
      - "master"


jobs:
  build_web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # build react
      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Cache node_modules
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.OS }}-node_modules-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node_modules-
      - name: yarn
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn
      - run: yarn test
      - run: yarn build

      # upload react build
      - uses: actions/upload-artifact@v2
        with:
          name: react-build
          path: build

  build_android:
    needs: build_web
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Cache node_modules
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.OS }}-node_modules-${{ hashFiles('yarn.lock') }}

      - name: Cache gradle
        id: cache-gradle
        uses: actions/cache@v2
        with:
          path: ~/.gradle
          key: ${{ runner.OS }}-gradle-${{ hashFiles('corodva-app/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-gradle-

      - name: Download a react build
        uses: actions/download-artifact@v2
        with:
          name: react-build
          path: build
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      # decrypt secrets
      - run: openssl enc -d -aes-256-cbc -in cordova-app/secrets.tar.encrypted -out cordova-app/secrets.tar -k ${{ secrets.ENC_PASSWORD }} -md sha512
      - run: pushd cordova-app && tar xvf secrets.tar && popd

      - name: yarn
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn
      - run: yarn build:android

      # Upload release apk to artifact
      - uses: actions/upload-artifact@v2
        with:
          name: android-build
          path: cordova-app/platforms/android/app/build/outputs/apk/release

  build_ios:
    needs: build_web
    runs-on: macos-latest
    # fetch the code
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Cache node_modules
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.OS }}-node_modules-${{ hashFiles('yarn.lock') }}

      - name: yarn
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn

      # decrypt files and import keys
      - run: openssl enc -d -aes-256-cbc -in cordova-app/secrets.tar.encrypted -out cordova-app/secrets.tar -k ${{ secrets.ENC_PASSWORD }} -md sha512
      - run: pushd cordova-app && tar xvf secrets.tar && popd
      - run: ./scripts/add-key-github.sh

      - name: Cache cocoapods
        id: cache-cocoapods
        uses: actions/cache@v2
        with:
          path: ~/.cocoapods
          key: ${{ runner.OS }}-cocoapods-${{ hashFiles('corodva-app/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-cocoapods-

      # get react build
      - name: Download a react build
        uses: actions/download-artifact@v2
        with:
          name: react-build
          path: build

      # build ios and sign
      - run: yarn build:ios

      # Upload ios build to artifact
      - uses: actions/upload-artifact@v2
        with:
          name: ios-build
          path: cordova-app/platforms/ios/build

  deploy_ios_testflight:
    needs: build_ios
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - run: mkdir -p cordova-app/platforms/ios/build/
      - name: Download a cordova build
        uses: actions/download-artifact@v2
        with:
          name: ios-build
          path: cordova-app/platforms/ios/build

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7
          bundler-cache: true

      - run: gem install fastlane -NV
      - run: yarn beta:ios
        env:
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}

  deploy_android_beta:
    needs: build_android
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - run: mkdir -p cordova-app/platforms/android/app/build/outputs/apk/release
      - name: Download a cordova build
        uses: actions/download-artifact@v2
        with:
          name: android-build
          path: cordova-app/platforms/android/app/build/outputs/apk/release

      - run: openssl enc -d -aes-256-cbc -in cordova-app/secrets.tar.encrypted -out cordova-app/secrets.tar -k ${{ secrets.ENC_PASSWORD }} -md sha512
      - run: pushd cordova-app && tar xvf secrets.tar && popd

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7
          bundler-cache: true

      - run: gem install fastlane -NV
      - run: yarn beta:android
        env:
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}

  deploy_web_firebase:
    needs: build_web
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # get react build
      - name: Download a react build
        uses: actions/download-artifact@v2
        with:
          name: react-build
          path: build

      - name: Deploy to Firebase
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting -m "V${{ steps.package-version.outputs.version }}"
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          PROJECT_ID: plastic-patrol-dev-722eb
